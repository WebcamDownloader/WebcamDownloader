name: Build App

on:
  push:
    tags:
      - v*
  workflow_dispatch:

jobs:
  build_windows:
    name: Windows
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          lfs: true
          submodules: recursive
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: '5.15.2'
          arch: win64_mingw81
      - name: Compile App
        run: lrelease WebcamDownloader.pro && qmake && make
      - name: Create Deployment Dir
        run: mkdir ..\WebcamDownloader-Release && mv release\WebcamDownloader.exe ..\WebcamDownloader-Release && windeployqt --qmldir . ..\WebcamDownloader-Release\WebcamDownloader.exe && cp dependencies\* ..\WebcamDownloader-Release
      - name: Install InnoSetup & 7zip
        run: choco install -y innosetup 7zip
      - name: Create Installer
        run: iscc setupscript.iss && mv ..\WebcamDownloaderSetup.exe .
      - name: Create Zip
        run: 7z a WebcamDownloader.zip ..\WebcamDownloader-Release
      - name: Create Artifact
        uses: actions/upload-artifact@v4
        with:
          name: WebcamDownloaderWindows
          path: |
            WebcamDownloaderSetup.exe
            WebcamDownloader.zip
          if-no-files-found: error
          retention-days: 7

  build_linux:
    name: Linux
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          lfs: true
          submodules: recursive
      - name: Set variables
        run: |
          export QT_DIR=/opt/qt515
          
          echo "/opt/qt515/bin" >> "$GITHUB_PATH"
          echo "QT_DIR=$QT_DIR" >> "$GITHUB_ENV"
          echo "QML2_IMPORT_PATH=$QT_DIR/qml" >> "$GITHUB_ENV"
          echo "LD_LIBRARY_PATH=$QT_DIR/lib:$LD_LIBRARY_PATH" >> "$GITHUB_ENV"
          echo "PATH=$QT_DIR/bin:$PATH" >> "$GITHUB_ENV"
      - name: Add Qt repo
        run: sudo add-apt-repository ppa:beineri/opt-qt-5.15.2-focal -y
      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y appstream build-essential libgl1-mesa-dev fuse \
          qt515base qt515declarative qt515quickcontrols qt515quickcontrols2 qt515tools \
          wget zlib1g-dev
      - name: Download tools
        run: |
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage 
          chmod +x linuxdeploy-x86_64.AppImage
          wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
          chmod +x linuxdeploy-plugin-qt-x86_64.AppImage
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
      - name: Build app
        run: lrelease WebcamDownloader.pro && qmake && make
      - name: Prepare directory
        run: |
          mkdir -p WebcamDownloader.AppDir/usr/share/applications
          mkdir -p WebcamDownloader.AppDir/usr/share/icons/hicolor/256x256/apps
          mkdir -p WebcamDownloader.AppDir/usr/qml
          mkdir -p WebcamDownloader.AppDir/usr/bin
          cp webcam-downloader.desktop WebcamDownloader.AppDir/usr/share/applications
          cp icon.png WebcamDownloader.AppDir/usr/share/icons/hicolor/256x256/apps/webcam-downloader.png
          mv WebcamDownloader WebcamDownloader.AppDir/usr/bin
          cp -r $QML2_IMPORT_PATH/* WebcamDownloader.AppDir/usr/qml
      - name: Create AppImage
        run: ./linuxdeploy-x86_64.AppImage --appimage-extract-and-run --appdir=WebcamDownloader.AppDir --plugin qt --output appimage
      - name: Create Artifact
        uses: actions/upload-artifact@v4
        with:
          name: WebcamDownloaderLinux
          path: WebcamDownloader-x86_64.AppImage
          if-no-files-found: error
          retention-days: 7

  release:
    name: Release
    needs:
      - build_windows
      - build_linux
    runs-on: ubuntu-latest
    steps:
      - name: Download Windows
        uses: actions/download-artifact@v4
        with:
          name: WebcamDownloaderWindows
        continue-on-error: true
      - name: Download Linux
        uses: actions/download-artifact@v4
        with:
          name: WebcamDownloaderLinux
        continue-on-error: true
      - name: Extract Version Name
        id: extract_name
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            return context.payload.ref.replace(/refs\/tags\//, '');
      - name: Create a Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Release ${{ steps.extract_name.outputs.result }}
          draft: false
          prerelease: false
          body: |
            For Windows download either `WebcamDownloaderSetup.exe` (installer) or `WebcamDownloader.zip` (non installable version) from assets below.

            For Linux (x64) download `WebcamDownloader-x86_64.AppImage`.
#            You can also use a docker image `webcamdownloader/webcam-downloader`.
          files: |
            WebcamDownloaderSetup.exe
            WebcamDownloader.zip
            WebcamDownloader-x86_64.AppImage
#  docker:
#    name: Create Docker
#    needs:
#      - build_ubuntu
#    runs-on: ubuntu-latest
#    steps:
#      - name: Extract Version Name
#        id: extract_name
#        uses: actions/github-script@v7
#        with:
#          result-encoding: string
#          script: |
#            return context.payload.ref.replace(/refs\/tags\/v/, '');
#      - name: Checkout Code
#        uses: actions/checkout@v4
#        with:
#          submodules: recursive
#      - name: Download Binary
#        uses: actions/download-artifact@v4
#        with:
#          name: WebcamDownloaderLinux_20.04_cli_only
#      - name: Move Binary
#        run: mv WebcamDownloader docker/WebcamDownloaderLinux_20.04_cli
#      - name: Login to DockerHub
#        uses: docker/login-action@v3
#        with:
#          username: webcamdownloader
#          password: ${{ secrets.DOCKER_HUB_TOKEN }}
#      - name: Build and Push
#        uses: docker/build-push-action@v6
#        with:
#          push: true
#          tags: |
#            webcamdownloader/webcam-downloader:latest
#            webcamdownloader/webcam-downloader:${{ steps.extract_name.outputs.result }}
#          context: docker
